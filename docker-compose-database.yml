version: '3.8'
services:
    mongo-dronedb:
        image: mongo
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: MongoDB2022!
            MONGO_INITDB_DATABASE: dronedb
        volumes:
            - "/dronedb:/var/run/docker.sock"
            - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
        container_name: mongo-dronedb
        hostname: mongo-dronedb
        ports:
            - "27017:27017"
        networks:
            - broker-net
        restart: always
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
                #max_replicas_per_node: 1
            restart_policy:
                condition: on-failure
                max_attempts: 3

    mongo-express:
        image: mongo-express
        build: 
            context: .
            dockerfile: ./mongo/Dockerfile
        environment:
            ME_CONFIG_BASICAUTH_USERNAME: root
            ME_CONFIG_BASICAUTH_PASSWORD: MongoExpress2022!
            ME_CONFIG_MONGODB_ADMINUSERNAME: root
            ME_CONFIG_MONGODB_ADMINPASSWORD: MongoDB2022!
            ME_CONFIG_MONGODB_PORT: 27017
            ME_CONFIG_MONGODB_SERVER: mongo-dronedb
        container_name: mongo-express
        hostname: mongo-express
        ports:
            - "8081:8081"
        networks:
            - broker-net
        restart: always
        depends_on:
            - mongo-dronedb
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == worker]
                #max_replicas_per_node: 1
            restart_policy:
                condition: on-failure
                max_attempts: 3  

# Networks to be created to facilitate communication between containers
networks:
    broker-net:
        name: broker-net
        external: true
volumes:
    dronedb: