version: '3.8'
services:
    zookeeper:
        image: zookeeper:3.4.9
        environment:
            ZOO_MY_ID: 1
            ZOO_PORT: 2181
            ZOO_SERVERS: server.1=zookeeper:2888:3888
        volumes:
            #- "/var/run/docker.sock:/var/run/docker.sock"
            - "zookeeper-data:/var/lib/zookeeper/data"
            - "zookeeper-txn-logs:/var/lib/zookeeper/log"
        container_name: zookeeper
        ports:
            - "2181:2181"
        networks:
            - broker-net
        restart: always
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure
                max_attempts: 3

    kafka:
        image: confluentinc/cp-kafka:5.5.0
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092, PLAINTEXT_HOST://kafka:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
        hostname: kafka
        container_name: kafka
        ports:
            - "29092:29092"
            - "9092:9092"
        networks:
            - broker-net
        restart: always
        depends_on:
            - zookeeper
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure
                max_attempts: 3

    mongo-dronedb:
        image: mongo
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: MongoDB2022!
            MONGO_INITDB_DATABASE: dronedb
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
            - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
        container_name: mongo-dronedb
        ports:
            - "27017:27017"
        networks:
            - broker-net
        restart: always
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure
                max_attempts: 3

    mongo-express:
        image: mongo-express
        build: 
            context: .
            dockerfile: ./mongo/Dockerfile
        environment:
            ME_CONFIG_BASICAUTH_USERNAME: root
            ME_CONFIG_BASICAUTH_PASSWORD: MongoExpress2022!
            ME_CONFIG_MONGODB_ADMINUSERNAME: root
            ME_CONFIG_MONGODB_ADMINPASSWORD: MongoDB2022!
            ME_CONFIG_MONGODB_PORT: 27017
            ME_CONFIG_MONGODB_SERVER: mongo-dronedb
        container_name: mongo-express
        ports:
            - "8081:8081"
        networks:
            - broker-net
        restart: always
        depends_on:
            - mongo-dronedb
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == worker]
            restart_policy:
                condition: on-failure
                max_attempts: 3

    drone-kafka-producer:
        image: ricardosoareslacerda/drone-kafka-producer:lastest
        environment:
            HOST_KAFKA_DOCKER_INTERNAL: kafka
            HOST_PRODUCER_DOCKER_INTERNAL: drone-kafka-producer
            PORT_HOST_PRODUCER_DOCKER_INTERNAL: 8082
            KAFKA_GROUP: drone_group
            KAFKA_TOPIC: drone_topic
        container_name: drone-kafka-producer
        ports:
            - "8082:8082"
        networks:
            - broker-net
        restart: always
        depends_on:
            - kafka
            - zookeeper
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == worker]
            restart_policy:
                condition: on-failure
                max_attempts: 3

    drone-kafka-consumer:
        image: ricardosoareslacerda/drone-kafka-consumer:lastest
        build: 
            context: ./drone-cluster-monitor-consumer
            dockerfile: ./Dockerfile
        environment:
            HOST_KAFKA_DOCKER_INTERNAL: kafka
            MONGODB_HOST: mongo-dronedb
            MONGODB_PORT: 27017
            MONGODB_AUTH_DATABASE: admin
            MONGODB_DATABASE: dronedb
            MONGODB_USERNAME: root
            MONGODB_PASSWORD: MongoDB2022!
            KAFKA_GROUP: drone_group
            KAFKA_TOPIC: drone_topic
            CONFIG_GMAIL_USERNAME: ricardosoareslacerda@gmail.com
            CONFIG_GMAIL_APP_PASSWORD: bwzrltermsamneyy
            MAIL_ADDRESS_FROM: ricardosoareslacerda@gmail.com
            MAIL_ADDRESS_TO: ricardosoareslacerda@gmail.com
        container_name: drone-kafka-consumer
        networks:
            - broker-net
        restart: always
        depends_on:
            - kafka
            - mongo-dronedb
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == worker]
            restart_policy:
                condition: on-failure
                max_attempts: 3

    visualizer:
        image: dockersamples/visualizer:stable
        ports:
        - "8888:8080"
        volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager] 
            restart_policy:
                condition: on-failure
                max_attempts: 3
    kowl:
        image: quay.io/cloudhut/kowl:master
        restart: unless-stopped
        hostname: kowl
        ports:
        - "8077:8077"
        volumes:
        - "/var/run/docker.sock:/var/run/docker.sock"
        - ./kowl-config.yaml:/etc/kowl/config.yaml
        entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
        networks:
            - broker-net
        depends_on:
            - kafka
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure
                max_attempts: 3

# Networks to be created to facilitate communication between containers
networks:
    broker-net:
        name: broker-net
        external: true
volumes:
    zookeeper-data:
    zookeeper-txn-logs: