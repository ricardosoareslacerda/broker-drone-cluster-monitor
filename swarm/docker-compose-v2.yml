version: '3.8'
services:
    zookeeper1:
        image: confluentinc/zookeeper:3.4.9
        environment:
            ZOO_MY_ID: 1
            ZOO_PORT: 2181
            ZOO_SERVERS: server.1=zookeeper1:2888:3888
            #ZOO_SERVERS: server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181 server.3=zookeeper3:2888:3888;2181
        volumes:
            - ./zk-single-kafka-single/zookeeper1/data:/data
            - ./zk-single-kafka-single/zookeeper1/datalog:/datalog
            #- "zookeeper-data:/var/lib/zookeeper1/data"
            #- "zookeeper-txn-logs:/var/lib/zookeeper1/log"
        hostname: zookeeper1
        container_name: zookeeper1
        ports:
            - "2181:2181"
        networks:
            - broker-net
        restart: always
        #deploy:
        #    replicas: 1
        #    restart_policy:
        #        condition: on-failure
        #        max_attempts: 3
        #    placement:
        #        max_replicas_per_node: 1
        #        constraints: [node.role == manager]



    zookeeper2:
        image: zookeeper
        environment:
            ZOO_MY_ID: 2
            ZOO_PORT: 2182
            ZOO_SERVERS: server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181
        volumes:
            - ./zk-single-kafka-single/zookeeper2/data:/data
            - ./zk-single-kafka-single/zookeeper2/datalog:/datalog
        hostname: zookeeper2
        container_name: zookeeper2
        ports:
            - "2182:2181"
        networks:
            - broker-net
        restart: on-failure
#        #deploy:
#        #    replicas: 1
#        #    restart_policy:
#        #        condition: on-failure
#        #        max_attempts: 3
#        #    placement:
#        #        max_replicas_per_node: 1
#        #        constraints:
#        #            - "node.role==manager"
#


    zookeeper2:
        image: zookeeper
        environment:
            ZOO_MY_ID: 2
            ZOO_PORT: 2182
            ZOO_SERVERS: server.1=zookeeper1:2888:3888;2181 server.2=zookeeper2:2888:3888;2181
        volumes:
            - ./zk-single-kafka-single/zookeeper2/data:/data
            - ./zk-single-kafka-single/zookeeper2/datalog:/datalog
        hostname: zookeeper2
        container_name: zookeeper2
        ports:
            - "2182:2181"
        networks:
            - broker-net
        restart: on-failure
#        #deploy:
#        #    replicas: 1
#        #    restart_policy:
#        #        condition: on-failure
#        #        max_attempts: 3
#        #    placement:
#        #        max_replicas_per_node: 1
#        #        constraints:
#        #            - "node.role==manager"

    kafka:
        image: confluentinc/cp-kafka:5.5.0
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092, PLAINTEXT_HOST://host.docker.internal:29092
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT
            KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        volumes:
            #- ./zk-single-kafka-single/kafka/data:/var/lib/kafka/data
            #- "/var/run/docker.sock:/var/run/docker.sock"
            - "kafka-data:/var/lib/kafka/data/"
        hostname: kafka
        container_name: kafka
        ports:
            - "29092:29092"
        networks:
            - broker-net
        restart: always
        #deploy:
        #    replicas: 1
        #    restart_policy:
        #        condition: on-failure
        #        max_attempts: 3
        #    placement:
        #        max_replicas_per_node: 1
        #        constraints:
        #            - "node.role==manager"
        depends_on:
            - zookeeper1

    visualizer:
        image: dockersamples/visualizer:stable
        ports:
            - "8888:8080"
        networks:
            - broker-net
        volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
        #deploy:
        #    placement:
        #        constraints: [node.role == manager]

#    drone-kafka-producer:
#        image: ricardosoareslacerda/drone-kafka-producer:lastest
#        container_name: drone-kafka-producer
#        ports:
#            - 8082:8082
#        environment:
#            HOST_KAFKA_DOCKER_INTERNAL: kafka
#            HOST_PRODUCER_DOCKER_INTERNAL: host.docker.internal
#            PORT_HOST_PRODUCER_DOCKER_INTERNAL: 8082
#            KAFKA_GROUP: drone_group
#            KAFKA_TOPIC: drone_topic
#        deploy:
#            replicas: 1
#            restart_policy:
#                condition: on-failure
#                max_attempts: 3
#            placement:
#                max_replicas_per_node: 1
#                constraints:
#                    - "node.role==worker"
#        depends_on:
#            - kafka
#            - zookeeper
#        networks:
#            - broker-net

#    drone-kafka-consumer:
#        image: ricardosoareslacerda/drone-kafka-consumer:lastest
#        container_name: drone-kafka-consumer
#        environment:
#            HOST_KAFKA_DOCKER_INTERNAL: kafka
#            MONGODB_HOST: mongo-dronedb
#            MONGODB_PORT: 27017
#            KAFKA_GROUP: drone_group
#            KAFKA_TOPIC: drone_topic
#        deploy:
#            replicas: 1
#            restart_policy:
#                condition: on-failure
#                max_attempts: 3
#            placement:
#                max_replicas_per_node: 1
#                constraints:
#                    - "node.role==worker"
#        depends_on:
#            - kafka
#            - zookeeper
#            #- mongo-dronedb
#        networks:
#            - broker-net

# Networks to be created to facilitate communication between containers
networks:
    broker-net:
        name: broker-net
        #driver: overlay
volumes:
    #dronedb:
    zookeeper-data:    
#            - "zookeeper-data:/var/lib/zookeeper/data"
#            - "zookeeper-txn-logs:/var/lib/zookeeper/log"
    zookeeper-txn-logs:
    kafka-data: